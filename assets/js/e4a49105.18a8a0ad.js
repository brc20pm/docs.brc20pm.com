"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[485],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return k}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(t),k=o,m=c["".concat(l,".").concat(k)]||c[k]||u[k]||a;return t?r.createElement(m,s(s({ref:n},d),{},{components:t})):r.createElement(m,s({ref:n},d))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=c;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4388:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var r=t(3117),o=t(102),a=(t(7294),t(3905)),s=["components"],i={id:"create-b721-token",title:"Create B721 Token",sidebar_label:"Create B721 Token",slug:"/guide/create-b721-token"},l="Create B721 Token on BRC20pm",p={unversionedId:"guide/create-b721-token",id:"guide/create-b721-token",title:"Create B721 Token",description:"BIP-721",source:"@site/docs/guide/create-b721-token.md",sourceDirName:"guide",slug:"/guide/create-b721-token",permalink:"/docs/guide/create-b721-token",editUrl:"https://github.com/brc20pm/documentation/tree/develop/docs/guide/create-b721-token.md",tags:[],version:"current",lastUpdatedAt:1717174751,formattedLastUpdatedAt:"6/1/2024",frontMatter:{id:"create-b721-token",title:"Create B721 Token",sidebar_label:"Create B721 Token",slug:"/guide/create-b721-token"},sidebar:"docs",previous:{title:"Quickly Create B20 Token",permalink:"/docs/guide/quickly-create-b20"},next:{title:"Quickly Create B721 Token",permalink:"/docs/guide/quickly-create-b721"}},d=[],u={toc:d};function c(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-b721-token-on-brc20pm"},"Create B721 Token on BRC20pm"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"BIP-721"),"\nThe standard requires the following functionality to be implemented to ensure the operation and management of the token:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$name()")," Get the name of the token"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$symbol()")," Get the symbol of the token"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$totalSupply")," gets the total amount of tokens"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$baseUrl()")," Gets the base URL of the token, usually used to access the metadata of the token"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$balanceOf(address)")," Gets the number of tokens held by the specified address"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ownerOf(tokenId)")," Query the owner of a specific token ID"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$tokenURI(tokenId)")," Gets the full resource locator for a specific token ID"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$getApproved(tokenId)")," finds addresses authorized to manage a specific token"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$isApprovedForAll(owner, operator)")," checks whether an operator is authorized by the owner to manage all tokens"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mint(data)")," mints a new token"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"transfer(to, tokenId)")," transfers tokens from the current caller to another address"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"transferFrom(from, to, tokenId)")," transfers from one address to another, provided the caller is authorized"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"approve(to, tokenId)")," authorizes an address to manage a specific token"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setApprovalForAll(operator, approval)")," sets or revokes an operator's management permissions for all tokens")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Script source code")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"class Contract {\n\n    _name;\n    _symbol;\n    _baseUrl;\n    _owners;//tokenId -> address\n    _balances;//address -> count\n    _totalSupply;\n\n    _tokenExist;//tokenId -> bool\n    _tokenApprovals;//tokenId -> address\n    _operatorApprovals;//address -> address -> bool\n\n    _tokenUrl;//tokenId -> string\n    _tokenIdCounter;\n\n    init() {\n        this._tokenIdCounter = 1000;\n        this._name = 'BIP721';\n        this._symbol = 'B721';\n        this._baseUrl = 'baseUrl:';\n        this._totalSupply = SafeMath.val(0);\n\n        this._owners = new Map();\n        this._balances = new Map();\n        this._tokenExist = new Map();\n        this._tokenApprovals = new Map();\n        this._operatorApprovals = new Map();\n        this._tokenUrl = new Map();\n    }\n\n\n    $name() {\n        return this._name;\n    }\n\n    $symbol() {\n        return this._symbol;\n    }\n\n    $baseUrl() {\n        return this._baseUrl;\n    }\n\n    $totalSupply(){\n        return SafeMath.val(this._totalSupply);\n    }\n\n    $balanceOf(address) {\n        const balance = this._balances.get(address);\n        if (!balance) {\n            return 0;\n        }\n        return this._balances.get(address);\n    }\n\n    $ownerOf(tokenId) {\n        this._tokenIdExist(tokenId);\n        return this._owners.get(tokenId);\n    }\n\n\n    $tokenURI(tokenId) {\n        this._tokenIdExist(tokenId);\n        return this._tokenUrl.get(tokenId);\n    }\n\n    $getApproved(tokenId) {\n        this._tokenIdExist(tokenId);\n        return this._tokenApprovals.get(tokenId);\n    }\n\n    $isApprovedForAll(owner, operator) {\n        const ApprovedAll = this._operatorApprovals.getBucket(owner, operator);\n        if (!ApprovedAll) {\n            return false;\n        }\n        return ApprovedAll;\n    }\n\n    mint(data){\n        this._mint(this._msgSender(),data);\n        return true;\n    }\n\n    transfer(to, tokenId) {\n        this._tokenIdExist(tokenId);\n        this._transfer(this._msgSender(), to, tokenId);\n        return true;\n    }\n\n    transferFrom(from, to, tokenId) {\n        this._tokenIdExist(tokenId);\n        require(this._isApprovedOrOwner(this._msgSender(), tokenId), \"B721: transfer caller is not owner nor approval\");\n        this._transfer(from, to, tokenId);\n        return true;\n    }\n\n\n    approve(to, tokenId) {\n        this._tokenIdExist(tokenId);\n        const owner = this._owners.get(tokenId);\n        require(to != owner, \"B721: approval to current owner\");\n        require(this._msgSender() == owner || this.isApprovedForAll(owner, this._msgSender()),\n            \"B721: approval caller is not owner nor approved for all\"\n        );\n        this._approve(to, tokenId);\n        return true;\n    }\n\n    setApprovalForAll(operator, approval) {\n        this._setApprovalForAll(this._msgSender(), operator, approval);\n        return true;\n    }\n\n    _mint(to,data){\n        const tokenId = this._tokenIdCounter++;\n        this._tokenExist.set(tokenId,true);\n        this._tokenUrl.set(tokenId,data)\n        this._owners.set(tokenId,to);\n        const oldL = this._balances.get(to);\n        this._balances.set(to,SafeMath.add(oldL,1));\n\n        this._totalSupply = SafeMath.add(this._totalSupply, 1)\n\n        this.event({name:'Transfer',from:address(0),to,tokenId})\n    }\n\n    _approve(to, tokenId) {\n        this._tokenApprovals.set(tokenId, to);\n        this.event({ name: 'Approvel', from: this.$ownerOf(tokenId), to, tokenId });\n    }\n\n    _unApproval(tokenId) {\n        this._tokenApprovals.delete(tokenId);\n        this.event({ name: 'UnApproval', from: this.$ownerOf(tokenId), tokenId });\n    }\n\n    _setApprovalForAll(owner, operator, approved) {\n        require(owner != operator, \"B721: approve to caller\");\n        this._operatorApprovals.setBucket(owner, operator, approved);\n        this.event({ name: 'ApprovelForAll', from: owner, to: operator, approved })\n    }\n\n    _transfer(from, to, tokenId) {\n        const owner = this._owners.get(tokenId);\n        require(from == owner, 'B721: transfer from incorrect owner')\n        this._unApproval(tokenId);\n\n        const oldR = this._balances.get(from);\n        const oldL = this._balances.get(to);\n\n        this._balances.set(from,SafeMath.sub(oldR,1));\n        this._balances.set(to,SafeMath.add(oldL,1));\n\n        this._owners.set(tokenId,to);\n\n        this.event({name:'Transfer',from,to,tokenId})\n    }\n\n    _isApprovedOrOwner(spender, tokenId) {\n        const owner = this.$ownerOf(tokenId);\n        return (spender == owner || this.$getApproved(tokenId) == spender || this.$isApprovedForAll(owner, spender));\n    }\n\n    _tokenIdExist(tokenId) {\n        const exist = this._tokenExist.get(tokenId);\n        require(exist, 'B721: nonexistent token');\n    }\n\n    _msgSender() {\n        return this.msgSender;\n    }\n\n}\n")))}c.isMDXComponent=!0}}]);